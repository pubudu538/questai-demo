/**********************************************************************
 *
 *   Component generated by Quest
 *
 *   WARNING: By editing this component by hand, you will lose the ability to regenerate the code without conflicts.
 *   To preserve that ability, always export from Quest to regenerate this file.
 *   To setup element attributes and CSS properties, use the Quest web app
 *   Code Logic goes in the hook associated with this component
 *
 *   For help and further details refer to: https://www.quest.ai/docs
 *
 *
 **********************************************************************/

import React from 'react';
import {
  TextField,
  Checkbox,
  FormControlLabel,
  Button,
  Link as MUILink,
} from '@mui/material';
import { styled } from '@mui/material/styles';
import { HandDrawn04Props } from 'types';

const HandDrawn041: any = styled('div')({
  backgroundColor: `rgba(255, 255, 255, 1)`,
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `column`,
  justifyContent: `flex-start`,
  alignItems: `center`,
  padding: `0px`,
  boxSizing: `border-box`,
  overflow: `hidden`,
  height: 'auto',
  width: '100%',
});

const Section: any = styled('div')({
  backgroundColor: `rgba(255, 255, 255, 1)`,
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `row`,
  justifyContent: `center`,
  alignItems: `flex-start`,
  padding: `18px 25px`,
  boxSizing: `border-box`,
  alignSelf: `stretch`,
  margin: `0px`,
});

const Image1: any = styled('div')({
  backgroundImage: `url(assets/images/placeholder.jpeg)`,
  backgroundPosition: `center`,
  backgroundSize: `cover`,
  backgroundRepeat: `no-repeat`,
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `row`,
  justifyContent: `flex-start`,
  alignItems: `flex-start`,
  alignSelf: `stretch`,
  flex: `1`,
  margin: `0px`,
  overflow: `hidden`,
});

const Article: any = styled('div')({
  backgroundColor: `rgba(255, 255, 255, 1)`,
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `column`,
  justifyContent: `flex-start`,
  alignItems: `center`,
  padding: `0px`,
  boxSizing: `border-box`,
  alignSelf: `stretch`,
  flex: `1`,
  margin: `7px 0px 0px 19px`,
});

const SignIn: any = styled('div')(({ theme }: any) => ({
  textAlign: `left`,
  whiteSpace: `pre-wrap`,
  fontSynthesis: `none`,
  color: `rgba(0, 0, 0, 1)`,
  fontStyle: theme.typography['Typography']['H6'].fontStyle,
  fontFamily: theme.typography['Typography']['H6'].fontFamily,
  fontWeight: theme.typography['Typography']['H6'].fontWeight,
  fontSize: theme.typography['Typography']['H6'].fontSize,
  letterSpacing: theme.typography['Typography']['H6'].letterSpacing,
  lineHeight: theme.typography['Typography']['H6'].lineHeight,
  textDecoration: theme.typography['Typography']['H6'].textDecoration,
  textTransform: theme.typography['Typography']['H6'].textTransform,
  alignSelf: `start`,
  margin: `0px`,
}));

const TextFieldOutlined: any = styled(TextField)(({ theme }: any) => ({
  alignSelf: `stretch`,
  margin: `6px 0px 0px 0px`,
  color: theme.palette['Text']['Primary'],
  fontStyle: theme.typography['Components']['Input Text'].fontStyle,
  fontFamily: theme.typography['Components']['Input Text'].fontFamily,
  fontWeight: theme.typography['Components']['Input Text'].fontWeight,
  fontSize: theme.typography['Components']['Input Text'].fontSize,
  letterSpacing: theme.typography['Components']['Input Text'].letterSpacing,
  lineHeight: theme.typography['Components']['Input Text'].lineHeight,
  textDecoration: theme.typography['Components']['Input Text'].textDecoration,
  textTransform: theme.typography['Components']['Input Text'].textTransform,
}));

const TextFieldOutlined1: any = styled(TextField)(({ theme }: any) => ({
  alignSelf: `stretch`,
  margin: `6px 0px 0px 0px`,
  color: theme.palette['Text']['Primary'],
  fontStyle: theme.typography['Components']['Input Text'].fontStyle,
  fontFamily: theme.typography['Components']['Input Text'].fontFamily,
  fontWeight: theme.typography['Components']['Input Text'].fontWeight,
  fontSize: theme.typography['Components']['Input Text'].fontSize,
  letterSpacing: theme.typography['Components']['Input Text'].letterSpacing,
  lineHeight: theme.typography['Components']['Input Text'].lineHeight,
  textDecoration: theme.typography['Components']['Input Text'].textDecoration,
  textTransform: theme.typography['Components']['Input Text'].textTransform,
}));

const FormControlLabel1: any = styled(FormControlLabel)(({ theme }: any) => ({
  margin: `6px 0px 0px 0px`,
  color: theme.palette['Text']['Primary'],
  fontStyle: theme.typography['Typography']['Body 1'].fontStyle,
  fontFamily: theme.typography['Typography']['Body 1'].fontFamily,
  fontWeight: theme.typography['Typography']['Body 1'].fontWeight,
  fontSize: theme.typography['Typography']['Body 1'].fontSize,
  letterSpacing: theme.typography['Typography']['Body 1'].letterSpacing,
  lineHeight: theme.typography['Typography']['Body 1'].lineHeight,
  textDecoration: theme.typography['Typography']['Body 1'].textDecoration,
  textTransform: theme.typography['Typography']['Body 1'].textTransform,
}));

const ButtonContained: any = styled(Button)(({ theme }: any) => ({
  alignSelf: `stretch`,
  margin: `6px 0px 0px 0px`,
  color: theme.palette['Primary']['Contrast'],
  fontStyle: theme.typography['Components']['Button Large'].fontStyle,
  fontFamily: theme.typography['Components']['Button Large'].fontFamily,
  fontWeight: theme.typography['Components']['Button Large'].fontWeight,
  fontSize: theme.typography['Components']['Button Large'].fontSize,
  letterSpacing: theme.typography['Components']['Button Large'].letterSpacing,
  lineHeight: theme.typography['Components']['Button Large'].lineHeight,
  textDecoration: theme.typography['Components']['Button Large'].textDecoration,
  textTransform: theme.typography['Components']['Button Large'].textTransform,
}));

const Link1: any = styled(MUILink)(({ theme }: any) => ({
  color: theme.palette['Primary']['Main'],
  fontStyle: theme.typography['Typography']['Body 1'].fontStyle,
  fontFamily: theme.typography['Typography']['Body 1'].fontFamily,
  fontWeight: theme.typography['Typography']['Body 1'].fontWeight,
  fontSize: theme.typography['Typography']['Body 1'].fontSize,
  letterSpacing: theme.typography['Typography']['Body 1'].letterSpacing,
  lineHeight: theme.typography['Typography']['Body 1'].lineHeight,
  textTransform: theme.typography['Typography']['Body 1'].textTransform,
  alignSelf: `start`,
  margin: `6px 0px 0px 0px`,
}));

function HandDrawn04(props: HandDrawn04Props): JSX.Element {
  return (
    <HandDrawn041 className={props.className}>
      <Section>
        <Image1></Image1>
        <Article>
          <SignIn>{`Sign in`}</SignIn>
          <TextFieldOutlined disabled={false} size={'small'} label={'email'} />
          <TextFieldOutlined1
            disabled={false}
            size={'small'}
            label={'password'}
          />
          <FormControlLabel1
            control={
              <Checkbox
                disabled={false}
                color={'primary'}
                size={'medium'}
                indeterminate={false}
                defaultChecked={false}
              ></Checkbox>
            }
            label={'Dagree to terms'}
          />
          <ButtonContained
            variant="contained"
            disabled={false}
            size={'large'}
            color={'primary'}
          >
            {'Sign in'}
          </ButtonContained>
          <Link1 href="#" underline="always">
            terms
          </Link1>
        </Article>
      </Section>
    </HandDrawn041>
  );
}

export default HandDrawn04;
