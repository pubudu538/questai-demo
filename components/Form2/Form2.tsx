/**********************************************************************
 *
 *   Component generated by Quest
 *
 *   WARNING: By editing this component by hand, you will lose the ability to regenerate the code without conflicts.
 *   To preserve that ability, always export from Quest to regenerate this file.
 *   To setup element attributes and CSS properties, use the Quest web app
 *   Code Logic goes in the hook associated with this component
 *
 *   For help and further details refer to: https://www.quest.ai/docs
 *
 *
 **********************************************************************/

import React from 'react';
import { TextField, Button } from '@mui/material';
import { styled } from '@mui/material/styles';
import { Form2Props } from 'types';
import useForm2 from 'components/Form2/useForm2';

const TypeQuest: any = styled('div')(({ theme }: any) => ({
  backgroundColor: theme.palette['Background']['Default'],
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `column`,
  width: '100%',
  justifyContent: `flex-start`,
  alignItems: `flex-start`,
  padding: `40px`,
  boxSizing: `border-box`,
  overflow: `hidden`,
  height: 'auto',
}));

const ContactUs: any = styled('div')(({ theme }: any) => ({
  textAlign: `left`,
  whiteSpace: `pre-wrap`,
  fontSynthesis: `none`,
  color: theme.palette['Text']['Primary'],
  fontStyle: theme.typography['Typography']['H5'].fontStyle,
  fontFamily: theme.typography['Typography']['H5'].fontFamily,
  fontWeight: theme.typography['Typography']['H5'].fontWeight,
  fontSize: theme.typography['Typography']['H5'].fontSize,
  letterSpacing: theme.typography['Typography']['H5'].letterSpacing,
  lineHeight: theme.typography['Typography']['H5'].lineHeight,
  textDecoration: theme.typography['Typography']['H5'].textDecoration,
  textTransform: theme.typography['Typography']['H5'].textTransform,
  margin: `0px`,
}));

const Input1: any = styled('div')({
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `row`,
  justifyContent: `flex-start`,
  alignItems: `flex-start`,
  padding: `0px`,
  boxSizing: `border-box`,
  alignSelf: `stretch`,
  margin: `40px 0px 0px 0px`,
});

const TextFieldStandard: any = styled(TextField)(({ theme }: any) => ({
  alignSelf: `stretch`,
  flex: `1`,
  margin: `0px`,
  color: theme.palette['Text']['Secondary'],
  fontStyle: theme.typography['Components']['Input Label'].fontStyle,
  fontFamily: theme.typography['Components']['Input Label'].fontFamily,
  fontWeight: theme.typography['Components']['Input Label'].fontWeight,
  fontSize: theme.typography['Components']['Input Label'].fontSize,
  letterSpacing: theme.typography['Components']['Input Label'].letterSpacing,
  lineHeight: theme.typography['Components']['Input Label'].lineHeight,
  textDecoration: theme.typography['Components']['Input Label'].textDecoration,
  textTransform: theme.typography['Components']['Input Label'].textTransform,
}));

const TextFieldStandard1: any = styled(TextField)(({ theme }: any) => ({
  alignSelf: `stretch`,
  flex: `1`,
  margin: `0px 0px 0px 30px`,
  color: theme.palette['Text']['Secondary'],
  fontStyle: theme.typography['Components']['Input Label'].fontStyle,
  fontFamily: theme.typography['Components']['Input Label'].fontFamily,
  fontWeight: theme.typography['Components']['Input Label'].fontWeight,
  fontSize: theme.typography['Components']['Input Label'].fontSize,
  letterSpacing: theme.typography['Components']['Input Label'].letterSpacing,
  lineHeight: theme.typography['Components']['Input Label'].lineHeight,
  textDecoration: theme.typography['Components']['Input Label'].textDecoration,
  textTransform: theme.typography['Components']['Input Label'].textTransform,
}));

const Input2: any = styled('div')({
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `row`,
  justifyContent: `flex-start`,
  alignItems: `flex-start`,
  padding: `0px`,
  boxSizing: `border-box`,
  alignSelf: `stretch`,
  margin: `40px 0px 0px 0px`,
});

const TextFieldStandard2: any = styled(TextField)(({ theme }: any) => ({
  alignSelf: `stretch`,
  flex: `1`,
  margin: `0px`,
  color: theme.palette['Text']['Secondary'],
  fontStyle: theme.typography['Components']['Input Label'].fontStyle,
  fontFamily: theme.typography['Components']['Input Label'].fontFamily,
  fontWeight: theme.typography['Components']['Input Label'].fontWeight,
  fontSize: theme.typography['Components']['Input Label'].fontSize,
  letterSpacing: theme.typography['Components']['Input Label'].letterSpacing,
  lineHeight: theme.typography['Components']['Input Label'].lineHeight,
  textDecoration: theme.typography['Components']['Input Label'].textDecoration,
  textTransform: theme.typography['Components']['Input Label'].textTransform,
}));

const TextFieldStandard3: any = styled(TextField)(({ theme }: any) => ({
  alignSelf: `stretch`,
  flex: `1`,
  margin: `0px 0px 0px 30px`,
  color: theme.palette['Text']['Secondary'],
  fontStyle: theme.typography['Components']['Input Label'].fontStyle,
  fontFamily: theme.typography['Components']['Input Label'].fontFamily,
  fontWeight: theme.typography['Components']['Input Label'].fontWeight,
  fontSize: theme.typography['Components']['Input Label'].fontSize,
  letterSpacing: theme.typography['Components']['Input Label'].letterSpacing,
  lineHeight: theme.typography['Components']['Input Label'].lineHeight,
  textDecoration: theme.typography['Components']['Input Label'].textDecoration,
  textTransform: theme.typography['Components']['Input Label'].textTransform,
}));

const TextFieldStandard4: any = styled(TextField)(({ theme }: any) => ({
  alignSelf: `stretch`,
  margin: `40px 0px 0px 0px`,
  color: theme.palette['Text']['Secondary'],
  fontStyle: theme.typography['Components']['Input Label'].fontStyle,
  fontFamily: theme.typography['Components']['Input Label'].fontFamily,
  fontWeight: theme.typography['Components']['Input Label'].fontWeight,
  fontSize: theme.typography['Components']['Input Label'].fontSize,
  letterSpacing: theme.typography['Components']['Input Label'].letterSpacing,
  lineHeight: theme.typography['Components']['Input Label'].lineHeight,
  textDecoration: theme.typography['Components']['Input Label'].textDecoration,
  textTransform: theme.typography['Components']['Input Label'].textTransform,
}));

const Btm: any = styled('div')({
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `column`,
  justifyContent: `flex-start`,
  alignItems: `center`,
  padding: `0px`,
  boxSizing: `border-box`,
  alignSelf: `stretch`,
  margin: `40px 0px 0px 0px`,
});

const ButtonContained: any = styled(Button)(({ theme }: any) => ({
  alignSelf: `stretch`,
  margin: `0px`,
  fontStyle: theme.typography['Components']['Button Large'].fontStyle,
  fontFamily: theme.typography['Components']['Button Large'].fontFamily,
  fontWeight: theme.typography['Components']['Button Large'].fontWeight,
  fontSize: theme.typography['Components']['Button Large'].fontSize,
  letterSpacing: theme.typography['Components']['Button Large'].letterSpacing,
  lineHeight: theme.typography['Components']['Button Large'].lineHeight,
  textDecoration: theme.typography['Components']['Button Large'].textDecoration,
  textTransform: theme.typography['Components']['Button Large'].textTransform,
}));

function Form2(props: Form2Props): JSX.Element {
  const { data, fns } = useForm2();

  return (
    <TypeQuest className={props.className}>
      <ContactUs>{`Contact Us`}</ContactUs>
      <Input1>
        <TextFieldStandard
          helperText={'errors.firstName'}
          disabled={false}
          size={'medium'}
          label={'First Name'}
          variant={'standard'}
          size={'medium'}
          value={data.firstName}
          onChange={(e) => fns.handleChange('firstName', e.target.value)}
          error={!!data.errors.firstName}
        />
        <TextFieldStandard1
          helperText={'errors.company'}
          disabled={false}
          size={'medium'}
          label={'Company'}
          variant={'standard'}
          size={'medium'}
          value={data.company}
          onChange={(e) => fns.handleChange('company', e.target.value)}
          error={!!data.errors.company}
        />
      </Input1>
      <Input2>
        <TextFieldStandard2
          helperText={'errors.phone'}
          disabled={false}
          size={'medium'}
          label={'Phone'}
          variant={'standard'}
          size={'medium'}
          value={data.phone}
          onChange={(e) => fns.handleChange('phone', e.target.value)}
          error={!!data.errors.phone}
        />
        <TextFieldStandard3
          helperText={'errors.email'}
          disabled={false}
          size={'medium'}
          label={'Email'}
          variant={'standard'}
          size={'medium'}
          value={data.email}
          onChange={(e) => fns.handleChange('email', e.target.value)}
          error={!!data.errors.email}
        />
      </Input2>
      <TextFieldStandard4
        disabled={false}
        size={'medium'}
        label={'Comment'}
        multiline={data.comment}
        variant={'standard'}
        size={'medium'}
        onChange={(e) => fns.handleChange('comment', e.target.value)}
      />
      <Btm>
        <ButtonContained
          disabled={false}
          size={'large'}
          color={'primary'}
          onClick={'handleSubmit'}
          variant={'contained'}
          size={'large'}
          color={'primary'}
        >
          {'SUBMIT'}
        </ButtonContained>
      </Btm>
    </TypeQuest>
  );
}

export default Form2;
