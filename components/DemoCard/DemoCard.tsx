/**********************************************************************
 *
 *   Component generated by Quest
 *
 *   WARNING: By editing this component by hand, you will lose the ability to regenerate the code without conflicts.
 *   To preserve that ability, always export from Quest to regenerate this file.
 *   To setup element attributes and CSS properties, use the Quest web app
 *   Code Logic goes in the hook associated with this component
 *
 *   For help and further details refer to: https://www.quest.ai/docs
 *
 *
 **********************************************************************/

import React from 'react';
import { Tooltip, Button } from '@mui/material';
import { styled } from '@mui/material/styles';
import { DemoCardProps } from 'types';
import useDemoCard from 'components/DemoCard/useDemoCard';

const TypeQuest: any = styled('div')(({ theme }: any) => ({
  backgroundColor: theme.palette['Background']['Default'],
  boxShadow: `0px 4px 6px rgba(3, 0, 161, 0.2)`,
  borderRadius: `8px`,
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `row`,
  width: '100%',
  height: 'auto',
  justifyContent: `flex-start`,
  alignItems: `flex-start`,
  padding: `0px`,
  boxSizing: `border-box`,
  overflow: `hidden`,
}));

const Image1: any = styled('div')({
  backgroundImage: `url(assets/images/Card7_Image.png)`,
  backgroundPosition: `center`,
  backgroundSize: `cover`,
  backgroundRepeat: `no-repeat`,
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `row`,
  justifyContent: `flex-start`,
  alignItems: `flex-start`,
  alignSelf: `stretch`,
  width: `290px`,
  margin: `0px`,
  overflow: `hidden`,
});

const TextButton: any = styled('div')({
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `column`,
  justifyContent: `flex-start`,
  alignItems: `flex-start`,
  padding: `40px 40px 0px 28px`,
  boxSizing: `border-box`,
  alignSelf: `stretch`,
  flex: `1`,
  margin: `0px 0px 0px 22px`,
});

const Content: any = styled('div')({
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `column`,
  justifyContent: `flex-start`,
  alignItems: `flex-start`,
  padding: `0px`,
  boxSizing: `border-box`,
  alignSelf: `stretch`,
  margin: `0px`,
});

const About: any = styled('div')({
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `row`,
  justifyContent: `flex-start`,
  alignItems: `center`,
  padding: `0px`,
  boxSizing: `border-box`,
  alignSelf: `stretch`,
  margin: `0px`,
});

const Label: any = styled('div')({
  borderRadius: `100px`,
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `column`,
  justifyContent: `flex-start`,
  alignItems: `flex-start`,
  padding: `0px`,
  boxSizing: `border-box`,
  margin: `0px`,
});

const Container: any = styled('div')(({ theme }: any) => ({
  backgroundColor: theme.palette['Info']['Main'],
  borderRadius: `16px`,
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `row`,
  justifyContent: `flex-start`,
  alignItems: `center`,
  padding: `4px`,
  boxSizing: `border-box`,
  height: `28px`,
  margin: `0px`,
}));

const Typography: any = styled('div')({
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `column`,
  justifyContent: `flex-start`,
  alignItems: `flex-start`,
  padding: `3px 6px`,
  boxSizing: `border-box`,
  margin: `0px`,
});

const Label1: any = styled('div')(({ theme }: any) => ({
  textAlign: `left`,
  whiteSpace: `pre-wrap`,
  fontSynthesis: `none`,
  color: theme.palette['Secondary']['Contrast'],
  fontStyle: theme.typography['Components']['Chip'].fontStyle,
  fontFamily: theme.typography['Components']['Chip'].fontFamily,
  fontWeight: theme.typography['Components']['Chip'].fontWeight,
  fontSize: theme.typography['Components']['Chip'].fontSize,
  letterSpacing: theme.typography['Components']['Chip'].letterSpacing,
  lineHeight: theme.typography['Components']['Chip'].lineHeight,
  textDecoration: theme.typography['Components']['Chip'].textDecoration,
  textTransform: theme.typography['Components']['Chip'].textTransform,
  margin: `0px`,
}));

const HotelName: any = styled('div')(({ theme }: any) => ({
  textAlign: `left`,
  whiteSpace: `pre-wrap`,
  fontSynthesis: `none`,
  color: theme.palette['Text']['Secondary'],
  fontStyle: `normal`,
  fontFamily: `Roboto`,
  fontWeight: `400`,
  fontSize: `14px`,
  letterSpacing: `0px`,
  textDecoration: `none`,
  textTransform: `none`,
  margin: `0px 0px 0px 10px`,
}));

const Details: any = styled('div')({
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `column`,
  justifyContent: `flex-start`,
  alignItems: `flex-start`,
  padding: `0px`,
  boxSizing: `border-box`,
  alignSelf: `stretch`,
  margin: `28px 0px 0px 0px`,
});

const Title: any = styled('div')(({ theme }: any) => ({
  textAlign: `left`,
  whiteSpace: `pre-wrap`,
  fontSynthesis: `none`,
  color: theme.palette['Text']['Primary'],
  fontStyle: `normal`,
  fontFamily: `Roboto`,
  fontWeight: `700`,
  fontSize: `20px`,
  letterSpacing: `0px`,
  textDecoration: `none`,
  textTransform: `none`,
  alignSelf: `stretch`,
  margin: `0px`,
}));

const Price: any = styled('div')(({ theme }: any) => ({
  textAlign: `left`,
  whiteSpace: `pre-wrap`,
  fontSynthesis: `none`,
  color: theme.palette['Text']['Secondary'],
  fontStyle: theme.typography['Typography']['Body 1'].fontStyle,
  fontFamily: theme.typography['Typography']['Body 1'].fontFamily,
  fontWeight: theme.typography['Typography']['Body 1'].fontWeight,
  fontSize: theme.typography['Typography']['Body 1'].fontSize,
  letterSpacing: theme.typography['Typography']['Body 1'].letterSpacing,
  lineHeight: theme.typography['Typography']['Body 1'].lineHeight,
  textDecoration: theme.typography['Typography']['Body 1'].textDecoration,
  textTransform: theme.typography['Typography']['Body 1'].textTransform,
  alignSelf: `stretch`,
  margin: `0px`,
}));

const Rating: any = styled('div')({
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `row`,
  justifyContent: `flex-start`,
  alignItems: `center`,
  padding: `0px`,
  boxSizing: `border-box`,
  alignSelf: `stretch`,
  margin: `28px 0px 0px 0px`,
});

const Star: any = styled('img')({
  height: `15.83px`,
  width: `16.67px`,
  margin: `0px`,
});

const Rating1: any = styled('div')(({ theme }: any) => ({
  textAlign: `left`,
  whiteSpace: `pre-wrap`,
  fontSynthesis: `none`,
  color: theme.palette['Text']['Secondary'],
  fontStyle: theme.typography['Typography']['Body 1'].fontStyle,
  fontFamily: theme.typography['Typography']['Body 1'].fontFamily,
  fontWeight: theme.typography['Typography']['Body 1'].fontWeight,
  fontSize: theme.typography['Typography']['Body 1'].fontSize,
  letterSpacing: theme.typography['Typography']['Body 1'].letterSpacing,
  lineHeight: theme.typography['Typography']['Body 1'].lineHeight,
  textDecoration: theme.typography['Typography']['Body 1'].textDecoration,
  textTransform: theme.typography['Typography']['Body 1'].textTransform,
  flex: `1`,
  height: `21px`,
  margin: `0px 0px 0px 6px`,
}));

const Description: any = styled('div')(({ theme }: any) => ({
  textAlign: `left`,
  whiteSpace: `pre-wrap`,
  fontSynthesis: `none`,
  color: theme.palette['Text']['Primary'],
  fontStyle: `normal`,
  fontFamily: `Roboto`,
  fontWeight: `400`,
  fontSize: `20px`,
  letterSpacing: `0px`,
  textDecoration: `none`,
  lineHeight: `26px`,
  textTransform: `none`,
  alignSelf: `stretch`,
  margin: `28px 0px 0px 0px`,
}));

const ButtonClicked: any = styled('div')({
  textAlign: `left`,
  whiteSpace: `pre-wrap`,
  fontSynthesis: `none`,
  color: `rgba(25, 118, 210, 1)`,
  fontStyle: `normal`,
  fontFamily: `Heebo`,
  fontWeight: `700`,
  fontSize: `20px`,
  letterSpacing: `0px`,
  textDecoration: `none`,
  textTransform: `none`,
  height: `48px`,
  width: `138px`,
  margin: `28px 0px 0px 0px`,
});

const ButtonContained: any = styled(Button)({
  margin: `28px 0px 0px 0px`,
});

function DemoCard(props: DemoCardProps): JSX.Element {
  const { fns } = useDemoCard(props);

  return (
    <TypeQuest className={props.className}>
      <Tooltip
        arrow={true}
        placement={'top'}
        title={'Description for the image'}
      >
        <Image1></Image1>
      </Tooltip>
      <TextButton>
        <Content>
          <About>
            <Label>
              <Container>
                <Typography>
                  <Label1>{`NEW`}</Label1>
                </Typography>
              </Container>
            </Label>
            <HotelName>{`Boutique Hotel`}</HotelName>
          </About>
          <Details>
            <Title>{'Title for the card'}</Title>
            <Price>{'$300 / night'}</Price>
          </Details>
          <Rating>
            <Star
              src={`assets/images/Card7_star.png`}
              loading="lazy"
              alt={'star'}
            />
            <Rating1>{'5.00 (200 reviews)'}</Rating1>
          </Rating>
          <Description>
            {
              'Lorem ipsum test to be seen and not read for placement only. Lorem ipsum test to be seen.'
            }
          </Description>
          {false && <ButtonClicked>{`Button Clicked!`}</ButtonClicked>}
          <ButtonContained
            variant="contained"
            size="large"
            color="primary"
            onClick={fns.handleButtonClick}
          >
            {' '}
            Book ME{' '}
          </ButtonContained>
        </Content>
      </TextButton>
    </TypeQuest>
  );
}

export default DemoCard;
